package fr.custommobs.events.types;

import fr.custommobs.CustomMobsPlugin;
import fr.custommobs.api.PrisonTycoonHook;
import org.bukkit.*;
import org.bukkit.block.Block;
import org.bukkit.block.Chest;
import org.bukkit.entity.Player;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.metadata.FixedMetadataValue;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.*;
import java.util.concurrent.ThreadLocalRandom; /**
 * Chasse au Tr√©sor
 */
public class TreasureSearchEvent extends ServerEvent {
    private final List<Location> treasureLocations = new ArrayList<>();
    private final Map<UUID, Integer> treasuresFound = new HashMap<>();
    private final Set<Location> foundTreasures = new HashSet<>();

    public TreasureSearchEvent(CustomMobsPlugin plugin, PrisonTycoonHook prisonHook, EventRewardsManager rewardsManager) {
        super(plugin, prisonHook, rewardsManager, "treasure_search", "Chasse au Tr√©sor",
                EventType.NEUTRAL, 30 * 60);
    }

    @Override
    protected void onStart() {
        Bukkit.broadcastMessage("¬ß6¬ßlüóù CHASSE AU TR√âSOR COMMENC√âE ! üóù");
        Bukkit.broadcastMessage("¬ße¬ßlCoffres cach√©s dans les mines standard !");
        Bukkit.broadcastMessage("¬ß7¬ßlCherchez les indices et trouvez les tr√©sors !");

        placeTreasures();
        startHintSystem();
    }

    private void placeTreasures() {
        // Placer 1-3 coffres par mine
        for (int mine = 0; mine < 5; mine++) { // 5 mines d'exemple
            int treasureCount = 1 + ThreadLocalRandom.current().nextInt(3);

            for (int i = 0; i < treasureCount; i++) {
                Location treasureLoc = generateTreasureLocation(mine);
                treasureLocations.add(treasureLoc);
                placeTreasureChest(treasureLoc);
            }
        }

        Bukkit.broadcastMessage("¬ß6¬ßl[TR√âSOR] ¬ße" + treasureLocations.size() + " coffres ont √©t√© cach√©s !");
    }

    private void placeTreasureChest(Location location) {
        Block block = location.getBlock();
        block.setType(Material.CHEST);

        Chest chest = (Chest) block.getState();
        chest.setMetadata("treasure_chest", new FixedMetadataValue(plugin, true));

        // Remplir le coffre
        Inventory inv = chest.getInventory();
        inv.addItem(
                prisonHook.createKey("rare"),
                new ItemStack(Material.DIAMOND, ThreadLocalRandom.current().nextInt(3) + 1),
                new ItemStack(Material.EMERALD, ThreadLocalRandom.current().nextInt(5) + 2)
        );

        // Chance d'objets sp√©ciaux
        if (ThreadLocalRandom.current().nextDouble() < 0.3) {
            inv.addItem(prisonHook.createKey("legendary"));
        }

        chest.update();

        // Effets visuels subtils
        location.getWorld().spawnParticle(Particle.HAPPY_VILLAGER, location.add(0.5, 0.5, 0.5), 5, 0.3, 0.3, 0.3, 0);
    }

    private void startHintSystem() {
        new BukkitRunnable() {
            int hintCount = 0;
            @Override
            public void run() {
                if (!active || hintCount >= 6) {
                    cancel();
                    return;
                }

                giveHint();
                hintCount++;
            }
        }.runTaskTimer(plugin, 300L, 300L); // Toutes les 5 minutes
    }

    private void giveHint() {
        if (treasureLocations.isEmpty()) return;

        Location randomTreasure = treasureLocations.get(ThreadLocalRandom.current().nextInt(treasureLocations.size()));
        if (foundTreasures.contains(randomTreasure)) return;

        String hint = generateHint(randomTreasure);
        Bukkit.broadcastMessage("¬ß6¬ßl[INDICE] ¬ße" + hint);
    }

    private String generateHint(Location location) {
        String[] hints = {
                "Un coffre brille pr√®s d'une source de lumi√®re...",
                "Des murmures √©tranges r√©sonnent dans les profondeurs...",
                "L'air scintille d'une aura magique quelque part...",
                "Un tr√©sor attend pr√®s de la roche solide...",
                "Les anciens ont cach√© leurs richesses dans l'ombre..."
        };
        return hints[ThreadLocalRandom.current().nextInt(hints.length)];
    }

    public void onTreasureFound(Player player, Location chestLocation) {
        if (!treasureLocations.contains(chestLocation) || foundTreasures.contains(chestLocation)) {
            return;
        }

        foundTreasures.add(chestLocation);
        addParticipant(player);

        int playerTreasures = treasuresFound.merge(player.getUniqueId(), 1, Integer::sum);

        if (playerTreasures <= 3) { // Max 3 coffres par joueur
            Bukkit.broadcastMessage("¬ß6¬ßl[TR√âSOR] ¬ßa" + player.getName() + " ¬ßea trouv√© un coffre ! (" + playerTreasures + "/3)");

            // Effets de c√©l√©bration
            player.getWorld().spawnParticle(Particle.FIREWORK, chestLocation, 30, 1, 1, 1, 0.2);
            player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 1.2f);
        } else {
            player.sendMessage("¬ßc¬ßl[TR√âSOR] ¬ß7Vous avez d√©j√† trouv√© 3 coffres (limite atteinte) !");
        }
    }

    @Override
    protected void onEnd() {
        // Nettoyer les coffres restants
        for (Location loc : treasureLocations) {
            if (!foundTreasures.contains(loc)) {
                loc.getBlock().setType(Material.AIR);
            }
        }

        calculateResults();
        distributeRewards();

        Bukkit.broadcastMessage("¬ß6¬ßl[TR√âSOR] ¬ßeChasse au tr√©sor termin√©e !");
    }

    private void calculateResults() {
        Bukkit.broadcastMessage("¬ß6¬ßl=== R√âSULTATS CHASSE AU TR√âSOR ===");

        List<Map.Entry<UUID, Integer>> ranking = treasuresFound.entrySet().stream()
                .sorted(Map.Entry.<UUID, Integer>comparingByValue().reversed())
                .toList();

        for (int i = 0; i < Math.min(5, ranking.size()); i++) {
            UUID playerId = ranking.get(i).getKey();
            int count = ranking.get(i).getValue();
            Player player = Bukkit.getPlayer(playerId);
            String name = player != null ? player.getName() : "Joueur d√©connect√©";

            Bukkit.broadcastMessage("¬ß7" + (i + 1) + ". ¬ße" + name + " ¬ß7- ¬ß6" + count + " coffre(s)");
        }
    }

    private void distributeRewards() {
        for (UUID playerId : participants) {
            Player player = Bukkit.getPlayer(playerId);
            if (player == null) continue;

            int treasureCount = treasuresFound.getOrDefault(playerId, 0);

            PrisonTycoonHook.EventReward reward = new PrisonTycoonHook.EventReward()
                    .beacons(50L * treasureCount)
                    .tokens(2000L * treasureCount);

            if (treasureCount >= 3) {
                reward.addItem(prisonHook.createKey("legendary"));
            }

            prisonHook.giveEventReward(player, reward);
        }
    }

    private Location generateTreasureLocation(int mineId) {
        // G√©n√©rer une location al√©atoire dans une mine
        World world = Bukkit.getWorlds().getFirst();
        return new Location(world,
                ThreadLocalRandom.current().nextInt(-100, 100),
                ThreadLocalRandom.current().nextInt(10, 50),
                ThreadLocalRandom.current().nextInt(-100, 100)
        );
    }

    @Override
    protected void onCleanup() {
        treasureLocations.clear();
        treasuresFound.clear();
        foundTreasures.clear();
    }
}
