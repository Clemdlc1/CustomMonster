package fr.custommobs.managers;

import fr.custommobs.CustomMobsPlugin;
import fr.custommobs.mobs.CustomMob;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.*;
import java.util.stream.Collectors;

public class BossStatsManager {

    private final CustomMobsPlugin plugin;

    // Stockage des statistiques par combat de boss
    private final Map<String, BossFightStats> activeBossFights; // mobId -> stats

    public BossStatsManager(CustomMobsPlugin plugin) {
        this.plugin = plugin;
        this.activeBossFights = new HashMap<>();
    }

    /**
     * DÃ©marre le tracking d'un combat de boss
     */
    public void startBossFight(LivingEntity boss, String mobId) {
        if (isBoss(mobId)) {
            String bossId = boss.getUniqueId().toString();
            activeBossFights.put(bossId, new BossFightStats(mobId, boss.getCustomName()));
            plugin.getLogger().info("DÃ©but du tracking pour le boss: " + mobId);
        }
    }

    /**
     * Enregistre des dÃ©gÃ¢ts infligÃ©s au boss
     */
    public void recordDamageToBoss(LivingEntity boss, Player player, double damage) {
        String bossId = boss.getUniqueId().toString();
        BossFightStats stats = activeBossFights.get(bossId);
        if (stats != null) {
            stats.addDamageToBoss(player, damage);
        }
    }

    /**
     * Enregistre des dÃ©gÃ¢ts subis par un joueur
     */
    public void recordDamageFromBoss(LivingEntity boss, Player player, double damage) {
        String bossId = boss.getUniqueId().toString();
        BossFightStats stats = activeBossFights.get(bossId);
        if (stats != null) {
            stats.addDamageFromBoss(player, damage);
        }
    }

    /**
     * Enregistre la mort d'un sbire du boss
     */
    public void recordMinionKill(LivingEntity boss, Player player, String minionType) {
        String bossId = boss.getUniqueId().toString();
        BossFightStats stats = activeBossFights.get(bossId);
        if (stats != null) {
            stats.addMinionKill(player, minionType);
        }
    }

    /**
     * Enregistre une mort de joueur
     */
    public void recordPlayerDeath(LivingEntity boss, Player player) {
        String bossId = boss.getUniqueId().toString();
        BossFightStats stats = activeBossFights.get(bossId);
        if (stats != null) {
            stats.addPlayerDeath(player);
        }
    }

    /**
     * Termine un combat de boss et affiche les rÃ©sultats
     */
    public void endBossFight(LivingEntity boss, boolean victory) {
        String bossId = boss.getUniqueId().toString();
        BossFightStats stats = activeBossFights.get(bossId);

        if (stats != null) {
            displayResults(stats, victory);
            distributeRewards(stats, victory);
            activeBossFights.remove(bossId);
        }
    }

    /**
     * Affiche les rÃ©sultats du combat
     */
    private void displayResults(BossFightStats stats, boolean victory) {
        Bukkit.broadcastMessage("");
        Bukkit.broadcastMessage("Â§6Â§l========== RÃ‰SULTATS DU COMBAT ==========");
        Bukkit.broadcastMessage("Â§eÂ§lBoss: " + stats.bossName);
        Bukkit.broadcastMessage("Â§aÂ§lRÃ©sultat: " + (victory ? "Â§2VICTOIRE !" : "Â§4DÃ‰FAITE"));
        Bukkit.broadcastMessage("Â§eÂ§lDurÃ©e: " + formatDuration(stats.getDuration()));
        Bukkit.broadcastMessage("");

        // TOP 3 DPS
        Bukkit.broadcastMessage("Â§cÂ§lâš” TOP DPS (DÃ©gÃ¢ts infligÃ©s) âš”");
        List<Map.Entry<UUID, Double>> topDps = stats.damageToBoss.entrySet().stream()
                .sorted(Map.Entry.<UUID, Double>comparingByValue().reversed())
                .limit(3)
                .collect(Collectors.toList());

        for (int i = 0; i < topDps.size(); i++) {
            Player player = Bukkit.getPlayer(topDps.get(i).getKey());
            if (player != null) {
                String medal = i == 0 ? "Â§6ðŸ¥‡" : i == 1 ? "Â§7ðŸ¥ˆ" : "Â§cðŸ¥‰";
                Bukkit.broadcastMessage(medal + " Â§e" + player.getName() + " Â§7- Â§c" +
                        String.format("%.1f", topDps.get(i).getValue()) + " dÃ©gÃ¢ts");
            }
        }

        Bukkit.broadcastMessage("");

        // TOP 3 TANK (DÃ©gÃ¢ts subis)
        Bukkit.broadcastMessage("Â§9Â§lðŸ›¡ TOP TANK (DÃ©gÃ¢ts encaissÃ©s) ðŸ›¡");
        List<Map.Entry<UUID, Double>> topTank = stats.damageFromBoss.entrySet().stream()
                .sorted(Map.Entry.<UUID, Double>comparingByValue().reversed())
                .limit(3)
                .collect(Collectors.toList());

        for (int i = 0; i < topTank.size(); i++) {
            Player player = Bukkit.getPlayer(topTank.get(i).getKey());
            if (player != null) {
                String medal = i == 0 ? "Â§6ðŸ¥‡" : i == 1 ? "Â§7ðŸ¥ˆ" : "Â§cðŸ¥‰";
                Bukkit.broadcastMessage(medal + " Â§e" + player.getName() + " Â§7- Â§9" +
                        String.format("%.1f", topTank.get(i).getValue()) + " dÃ©gÃ¢ts subis");
            }
        }

        Bukkit.broadcastMessage("");

        // TOP 3 SLAYER (Sbires tuÃ©s)
        Bukkit.broadcastMessage("Â§5Â§lâš¡ TOP SLAYER (Sbires Ã©liminÃ©s) âš¡");
        List<Map.Entry<UUID, Integer>> topSlayer = stats.minionKills.entrySet().stream()
                .sorted(Map.Entry.<UUID, Integer>comparingByValue().reversed())
                .limit(3)
                .collect(Collectors.toList());

        for (int i = 0; i < topSlayer.size(); i++) {
            Player player = Bukkit.getPlayer(topSlayer.get(i).getKey());
            if (player != null) {
                String medal = i == 0 ? "Â§6ðŸ¥‡" : i == 1 ? "Â§7ðŸ¥ˆ" : "Â§cðŸ¥‰";
                Bukkit.broadcastMessage(medal + " Â§e" + player.getName() + " Â§7- Â§5" +
                        topSlayer.get(i).getValue() + " sbires");
            }
        }

        // MVP GLOBAL
        Player mvp = determineMVP(stats);
        if (mvp != null) {
            Bukkit.broadcastMessage("");
            Bukkit.broadcastMessage("Â§6Â§lâ˜…â˜…â˜… MVP DU COMBAT â˜…â˜…â˜…");
            Bukkit.broadcastMessage("Â§6Â§l" + mvp.getName() + " Â§e- Champion absolu !");
        }

        Bukkit.broadcastMessage("Â§6Â§l==========================================");
        Bukkit.broadcastMessage("");
    }

    /**
     * DÃ©termine le MVP du combat
     */
    private Player determineMVP(BossFightStats stats) {
        Map<UUID, Double> mvpScores = new HashMap<>();

        // Calcul du score MVP
        for (UUID playerId : getAllParticipants(stats)) {
            double score = 0;

            // Points pour dÃ©gÃ¢ts infligÃ©s (1 point par point de dÃ©gÃ¢t)
            score += stats.damageToBoss.getOrDefault(playerId, 0.0);

            // Points pour sbires tuÃ©s (50 points par sbire)
            score += stats.minionKills.getOrDefault(playerId, 0) * 50;

            // Bonus de survie (100 points si pas mort)
            if (stats.playerDeaths.getOrDefault(playerId, 0) == 0) {
                score += 100;
            }

            // Malus pour mort subis (pÃ©nalitÃ© lÃ©gÃ¨re)
            score -= stats.playerDeaths.getOrDefault(playerId, 0) * 0.1;

            mvpScores.put(playerId, score);
        }

        return mvpScores.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .map(entry -> Bukkit.getPlayer(entry.getKey()))
                .orElse(null);
    }

    /**
     * Distribue les rÃ©compenses selon les performances
     */
    private void distributeRewards(BossFightStats stats, boolean victory) {
        if (!victory) return; // Pas de rÃ©compenses en cas de dÃ©faite

        // RÃ©compenses pour le MVP
        Player mvp = determineMVP(stats);
        if (mvp != null) {
            giveMVPReward(mvp, stats.mobId);
        }

        // RÃ©compenses pour les TOP 3 DPS
        List<UUID> topDps = stats.damageToBoss.entrySet().stream()
                .sorted(Map.Entry.<UUID, Double>comparingByValue().reversed())
                .limit(3)
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());

        for (int i = 0; i < topDps.size(); i++) {
            Player player = Bukkit.getPlayer(topDps.get(i));
            if (player != null) {
                giveDPSReward(player, i + 1, stats.mobId);
            }
        }

        // RÃ©compenses de participation pour tous
        for (UUID playerId : getAllParticipants(stats)) {
            Player player = Bukkit.getPlayer(playerId);
            if (player != null) {
                giveParticipationReward(player, stats.mobId);
            }
        }
    }

    /**
     * RÃ©compense MVP
     */
    private void giveMVPReward(Player player, String mobId) {
        // Titre MVP
        player.sendTitle("Â§6Â§lMVP !", "Â§eChampion du combat !", 10, 70, 20);

        // Items spÃ©ciaux selon le boss
        switch (mobId) {
            case "wither_boss":
                giveItem(player, new ItemStack(Material.NETHER_STAR, 3), "Â§5Ã‰toile du NÃ©ant Â§7(MVP)");
                giveItem(player, new ItemStack(Material.BEACON, 1), "Â§6Phare de Victoire Â§7(MVP)");
                break;
            case "warden_boss":
                giveItem(player, new ItemStack(Material.ECHO_SHARD, 5), "Â§0Ã‰clat des Abysses Â§7(MVP)");
                giveItem(player, new ItemStack(Material.SCULK_CATALYST, 2), "Â§8Catalyseur Sculk Â§7(MVP)");
                break;
            case "ravager_boss":
                giveItem(player, new ItemStack(Material.TOTEM_OF_UNDYING, 2), "Â§cTotem de Bravoure Â§7(MVP)");
                giveItem(player, new ItemStack(Material.DIAMOND, 16), "Â§bDiamants de Victoire Â§7(MVP)");
                break;
            default:
                giveItem(player, new ItemStack(Material.DIAMOND, 10), "Â§bRÃ©compense MVP Â§7(MVP)");
        }

        player.sendMessage("Â§6Â§l[MVP] Â§eVous avez reÃ§u des rÃ©compenses spÃ©ciales !");
    }

    /**
     * RÃ©compense DPS
     */
    private void giveDPSReward(Player player, int rank, String mobId) {
        String rankName = switch (rank) {
            case 1 -> "Â§6Or";
            case 2 -> "Â§7Argent";
            case 3 -> "Â§cBronze";
            default -> "Â§eDPS";
        };

        int amount = switch (rank) {
            case 1 -> 8;
            case 2 -> 5;
            case 3 -> 3;
            default -> 1;
        };

        giveItem(player, new ItemStack(Material.GOLD_INGOT, amount), "Â§6MÃ©daille " + rankName + " DPS");
        player.sendMessage("Â§câš” Â§eVous avez terminÃ© " + rank + (rank == 1 ? "er" : "Ã¨me") + " en DPS !");
    }

    /**
     * RÃ©compense de participation
     */
    private void giveParticipationReward(Player player, String mobId) {
        // XP bonus
        player.giveExp(100 + (int)(Math.random() * 100));

        // Items de base
        giveItem(player, new ItemStack(Material.EMERALD, 3), "Â§aGemme de Participation");

        // Chance d'item bonus
        if (Math.random() < 0.3) { // 30% de chance
            Material[] bonusItems = {Material.ENCHANTED_GOLDEN_APPLE, Material.DIAMOND, Material.NETHERITE_SCRAP};
            Material bonus = bonusItems[(int)(Math.random() * bonusItems.length)];
            giveItem(player, new ItemStack(bonus, 1), "Â§dBonus de Chance");
            player.sendMessage("Â§dâœ¨ Bonus de chance obtenu !");
        }
    }

    /**
     * Donne un item avec un nom custom
     */
    private void giveItem(Player player, ItemStack item, String name) {
        ItemMeta meta = item.getItemMeta();
        if (meta != null) {
            meta.setDisplayName(name);
            meta.setLore(Arrays.asList("Â§7Obtenu lors d'un combat de boss", "Â§7" + new Date().toString()));
            item.setItemMeta(meta);
        }

        if (player.getInventory().firstEmpty() != -1) {
            player.getInventory().addItem(item);
        } else {
            player.getWorld().dropItemNaturally(player.getLocation(), item);
            player.sendMessage("Â§eâš  Item droppÃ© au sol (inventaire plein) !");
        }
    }

    /**
     * Formate la durÃ©e du combat
     */
    private String formatDuration(long durationMs) {
        long seconds = durationMs / 1000;
        long minutes = seconds / 60;
        seconds = seconds % 60;
        return String.format("%d:%02d", minutes, seconds);
    }

    /**
     * RÃ©cupÃ¨re tous les participants du combat
     */
    private Set<UUID> getAllParticipants(BossFightStats stats) {
        Set<UUID> participants = new HashSet<>();
        participants.addAll(stats.damageToBoss.keySet());
        participants.addAll(stats.damageFromBoss.keySet());
        participants.addAll(stats.minionKills.keySet());
        participants.addAll(stats.playerDeaths.keySet());
        return participants;
    }

    /**
     * VÃ©rifie si c'est un boss
     */
    private boolean isBoss(String mobId) {
        return mobId.contains("boss") ||
                mobId.equals("necromancer_dark") ||
                mobId.equals("dragon_fire") ||
                mobId.equals("geode_aberration");
    }

    /**
     * Classe interne pour stocker les statistiques d'un combat
     */
    private static class BossFightStats {
        public final String mobId;
        public final String bossName;
        public final long startTime;

        public final Map<UUID, Double> damageToBoss = new HashMap<>();
        public final Map<UUID, Double> damageFromBoss = new HashMap<>();
        public final Map<UUID, Integer> minionKills = new HashMap<>();
        public final Map<UUID, Integer> playerDeaths = new HashMap<>();

        public BossFightStats(String mobId, String bossName) {
            this.mobId = mobId;
            this.bossName = bossName != null ? bossName : mobId;
            this.startTime = System.currentTimeMillis();
        }

        public void addDamageToBoss(Player player, double damage) {
            damageToBoss.merge(player.getUniqueId(), damage, Double::sum);
        }

        public void addDamageFromBoss(Player player, double damage) {
            damageFromBoss.merge(player.getUniqueId(), damage, Double::sum);
        }

        public void addMinionKill(Player player, String minionType) {
            minionKills.merge(player.getUniqueId(), 1, Integer::sum);
        }

        public void addPlayerDeath(Player player) {
            playerDeaths.merge(player.getUniqueId(), 1, Integer::sum);
        }

        public long getDuration() {
            return System.currentTimeMillis() - startTime;
        }
    }
}